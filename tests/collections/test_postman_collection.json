{
	"info": {
		"_postman_id": "c087242f-c5f8-470e-978a-322292609521",
		"name": "Template-Integration-Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "17057612",
		"_collection_link": "https://red-shadow-543286.postman.co/workspace/Integration-Test~e64ac9cf-2581-4551-912f-5ed44db9355d/collection/17057612-c087242f-c5f8-470e-978a-322292609521?action=share&creator=17057612&source=collection_link"
	},
	"item": [
		{
			"name": "Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.lastName).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.firstMidName).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.enrollmentDate).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"lastName is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"firstMidName is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.firstMidName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"enrollmentDate is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.enrollmentDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"CreatedId\", jsonData.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"lastName\": \"EvansEvans\",\n  \"firstMidName\": \"Joseph\",\n  \"enrollmentDate\": \"2023-09-07T10:55:29.825Z\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{ServerUrl}}/student"
			},
			"response": []
		},
		{
			"name": "Get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields - lastName, firstMidName, enrollmentDate, and id\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.lastName).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.firstMidName).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.enrollmentDate).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('guid');",
							"});",
							"",
							"",
							"pm.test(\"Last name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.lastName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"First mid name should be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.firstMidName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"enrollmentDate is a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.enrollmentDate).to.match(/\\d{4}-\\d{2}-\\d{2}/);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{ServerUrl}}/student/{{CreatedId}}"
			},
			"response": []
		},
		{
			"name": "Upsert",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\":\"{{CreatedId}}\",  \n  \"lastName\": \"EvansEvans\",\n  \"firstMidName\": \"Joseph\",\n  \"enrollmentDate\": \"2023-09-07T10:55:29.825Z\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{ServerUrl}}/student"
			},
			"response": []
		},
		{
			"name": "GetAll",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array with at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    pm.expect(responseData).to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Each element in the response array has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"",
							"    responseData.forEach(function (student) {",
							"        pm.expect(student.lastName).to.exist.and.to.be.a('string');",
							"        pm.expect(student.firstMidName).to.exist.and.to.be.a('string');",
							"        pm.expect(student.enrollmentDate).to.exist.and.to.be.a('string');",
							"        pm.expect(student.id).to.exist.and.to.be.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"enrollmentDate is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(function (student) {",
							"        pm.expect(student.enrollmentDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"All ids in the response array are unique\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"",
							"    const ids = [];",
							"    responseData.forEach(function (student) {",
							"        pm.expect(student.id).to.exist;",
							"        pm.expect(ids).to.not.include(student.id, \"Duplicate id found\");",
							"        ids.push(student.id);",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ServerUrl}}/student?page=0&pageSize=100",
					"host": [
						"{{ServerUrl}}"
					],
					"path": [
						"student"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "pageSize",
							"value": "100"
						}
					]
				}
			},
			"response": []
		}
	]
}